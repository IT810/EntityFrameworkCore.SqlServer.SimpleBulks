using EntityFrameworkCore.SqlServer.SimpleBulks.Extensions;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace EntityFrameworkCore.SqlServer.SimpleBulks.BulkInsert
{
    public class BulkInsertBuilder<T>
    {
        private IEnumerable<T> _data;
        private string _tableName;
        private string _ouputIdColumn;
        private IEnumerable<string> _columnNames;
        private readonly SqlConnection _connection;

        public BulkInsertBuilder(SqlConnection connection)
        {
            _connection = connection;
        }

        public BulkInsertBuilder<T> WithData(IEnumerable<T> data)
        {
            _data = data;
            return this;
        }

        public BulkInsertBuilder<T> ToTable(string tableName)
        {
            _tableName = tableName;
            return this;
        }

        public BulkInsertBuilder<T> WithOuputId(string idColumn)
        {
            _ouputIdColumn = idColumn;
            return this;
        }

        public BulkInsertBuilder<T> WithOuputId(Expression<Func<T, object>> idSelector)
        {
            _ouputIdColumn = idSelector.Body.GetMemberName();
            return this;
        }

        public BulkInsertBuilder<T> WithColumns(IEnumerable<string> columnNames)
        {
            _columnNames = columnNames;
            return this;
        }

        public BulkInsertBuilder<T> WithColumns(Expression<Func<T, object>> columnNamesSelector)
        {
            _columnNames = columnNamesSelector.Body.GetMemberNames().ToArray();
            return this;
        }

        public void Execute()
        {
            DataTable dataTable;
            if (string.IsNullOrWhiteSpace(_ouputIdColumn))
            {
                dataTable = _data.ToDataTable(_columnNames.ToList());

                _connection.Open();
                dataTable.SqlBulkCopy(_tableName, _connection);
                _connection.Close();
                return;
            }

            var temptableName = "#" + Guid.NewGuid();
            dataTable = _data.ToDataTable(_columnNames.ToList(), addIndexNumberColumn: true);
            var sqlCreateTemptable = dataTable.GenerateTableDefinition(temptableName, new[] { Constants.AutoGeneratedIndexNumberColumn });

            var mergeStatementBuilder = new StringBuilder();
            mergeStatementBuilder.AppendLine($"MERGE INTO [{_tableName}]");
            mergeStatementBuilder.AppendLine("USING");
            mergeStatementBuilder.AppendLine("(");
            mergeStatementBuilder.AppendLine($"SELECT TOP {_data.Count()} * FROM [{temptableName}] ORDER BY [{Constants.AutoGeneratedIndexNumberColumn}]");
            mergeStatementBuilder.AppendLine(") AS Src");
            mergeStatementBuilder.AppendLine("ON 1 = 0");
            mergeStatementBuilder.AppendLine("WHEN NOT MATCHED BY TARGET THEN");
            mergeStatementBuilder.AppendLine($"INSERT ({string.Join(", ", _columnNames.Select(x => $"[{x}]"))})");
            mergeStatementBuilder.AppendLine($"VALUES ({string.Join(", ", _columnNames.Select(x => $"Src.[{x}]"))})");
            mergeStatementBuilder.AppendLine($"OUTPUT inserted.[{_ouputIdColumn}], Src.[{Constants.AutoGeneratedIndexNumberColumn}]");
            mergeStatementBuilder.AppendLine(";");

            _connection.Open();

            using (var createTemptableCommand = _connection.CreateCommand())
            {
                createTemptableCommand.CommandText = sqlCreateTemptable;
                createTemptableCommand.ExecuteNonQuery();
            }

            dataTable.SqlBulkCopy(temptableName, _connection);

            var returnedIds = new Dictionary<long, object>();

            using (var updateCommand = _connection.CreateCommand())
            {
                updateCommand.CommandText = mergeStatementBuilder.ToString();
                using (var reader = updateCommand.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        returnedIds[(reader[Constants.AutoGeneratedIndexNumberColumn] as long?).Value] = reader[_ouputIdColumn];
                    }
                }
            }

            var idProperty = typeof(T).GetProperty(_ouputIdColumn);

            long idx = 0;
            foreach (var row in _data)
            {
                idProperty.SetValue(row, returnedIds[idx]);
                idx++;
            }

            _connection.Close();
        }

    }
}
