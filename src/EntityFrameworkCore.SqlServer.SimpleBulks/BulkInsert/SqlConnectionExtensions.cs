using EntityFrameworkCore.SqlServer.SimpleBulks.Extensions;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

namespace EntityFrameworkCore.SqlServer.SimpleBulks.BulkInsert
{
    public static class SqlConnectionExtensions
    {
        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, Expression<Func<T, object>> columnNamesSelector)
        {
            string tableName = TableMapper.Resolve(typeof(T));
            connection.BulkInsert(data, tableName, columnNamesSelector);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, IEnumerable<string> columnNames)
        {
            string tableName = TableMapper.Resolve(typeof(T));
            connection.BulkInsert(data, tableName, columnNames);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, string tableName, Expression<Func<T, object>> columnNamesSelector)
        {
            var columnNames = columnNamesSelector.Body.GetMemberNames().ToArray();
            connection.BulkInsert(data, tableName, columnNames);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, string tableName, IEnumerable<string> columnNames)
        {
            var dataTable = data.ToDataTable(columnNames.ToList());

            connection.Open();
            dataTable.SqlBulkCopy(tableName, connection);
            connection.Close();
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, Expression<Func<T, object>> columnNamesSelector, Expression<Func<T, object>> idSelector)
        {
            string tableName = TableMapper.Resolve(typeof(T));
            connection.BulkInsert(data, tableName, columnNamesSelector, idSelector);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, IEnumerable<string> columnNames, string idColumnName)
        {
            string tableName = TableMapper.Resolve(typeof(T));
            connection.BulkInsert(data, tableName, columnNames, idColumnName);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, string tableName, Expression<Func<T, object>> columnNamesSelector, Expression<Func<T, object>> idSelector)
        {
            var columnNames = columnNamesSelector.Body.GetMemberNames().ToArray();
            var idColumn = idSelector.Body.GetMemberName();
            connection.BulkInsert(data, tableName, columnNames, idColumn);
        }

        public static void BulkInsert<T>(this SqlConnection connection, IEnumerable<T> data, string tableName, IEnumerable<string> columnNames, string idColumnName)
        {
            var temptableName = "#" + Guid.NewGuid();
            var dataTable = data.ToDataTable(columnNames.ToList(), addIndexNumberColumn: true);
            var sqlCreateTemptable = dataTable.GenerateTableDefinition(temptableName, new[] { Constants.AutoGeneratedIndexNumberColumn });

            var mergeStatementBuilder = new StringBuilder();
            mergeStatementBuilder.AppendLine($"MERGE INTO [{tableName}]");
            mergeStatementBuilder.AppendLine("USING");
            mergeStatementBuilder.AppendLine("(");
            mergeStatementBuilder.AppendLine($"SELECT TOP {data.Count()} * FROM [{temptableName}] ORDER BY [{Constants.AutoGeneratedIndexNumberColumn}]");
            mergeStatementBuilder.AppendLine(") AS Src");
            mergeStatementBuilder.AppendLine("ON 1 = 0");
            mergeStatementBuilder.AppendLine("WHEN NOT MATCHED BY TARGET THEN");
            mergeStatementBuilder.AppendLine($"INSERT ({string.Join(", ", columnNames.Select(x => $"[{x}]"))})");
            mergeStatementBuilder.AppendLine($"VALUES ({string.Join(", ", columnNames.Select(x => $"Src.[{x}]"))})");
            mergeStatementBuilder.AppendLine($"OUTPUT inserted.[{idColumnName}], Src.[{Constants.AutoGeneratedIndexNumberColumn}]");
            mergeStatementBuilder.AppendLine(";");

            connection.Open();

            using (var createTemptableCommand = connection.CreateCommand())
            {
                createTemptableCommand.CommandText = sqlCreateTemptable;
                createTemptableCommand.ExecuteNonQuery();
            }

            dataTable.SqlBulkCopy(temptableName, connection);

            var returnedIds = new Dictionary<long, object>();

            using (var updateCommand = connection.CreateCommand())
            {
                updateCommand.CommandText = mergeStatementBuilder.ToString();
                var reader = updateCommand.ExecuteReader();
                while (reader.Read())
                {
                    returnedIds[(reader[Constants.AutoGeneratedIndexNumberColumn] as long?).Value] = reader[idColumnName];
                }
            }

            var idProperty = typeof(T).GetProperty(idColumnName);

            long idx = 0;
            foreach (var row in data)
            {
                idProperty.SetValue(row, returnedIds[idx]);
                idx++;
            }

            connection.Close();
        }
    }
}
